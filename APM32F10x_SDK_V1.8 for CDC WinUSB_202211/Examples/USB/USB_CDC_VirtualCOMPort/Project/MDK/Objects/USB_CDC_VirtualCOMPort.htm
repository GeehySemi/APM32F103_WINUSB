<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\USB_CDC_VirtualCOMPort.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\USB_CDC_VirtualCOMPort.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Dec 14 15:49:48 2022
<BR><P>
<H3>Maximum Stack Usage =        156 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CDC_Init &rArr; USBD_Init &rArr; USBD_HardWareInit &rArr; NVIC_EnableIRQRequest
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from apm32f10x_int.o(i.BusFault_Handler) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[48]">CAN2_RX1_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[49]">CAN2_SCE_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from apm32f10x_int.o(i.DebugMon_Handler) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EINT0_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EINT15_10_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EINT1_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EINT2_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EINT3_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EINT4_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EINT9_5_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">EMMC_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from apm32f10x_int.o(i.HardFault_Handler) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from apm32f10x_int.o(i.MemManage_Handler) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from apm32f10x_int.o(i.NMI_Handler) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from apm32f10x_int.o(i.PendSV_Handler) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCM_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from apm32f10x_int.o(i.SVC_Handler) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from apm32f10x_int.o(i.SysTick_Handler) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_apm32f10x.o(i.SystemInit) referenced from startup_apm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TMR1_BRK_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TMR1_CC_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TMR1_TRG_COM_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TMR1_UP_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TMR2_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TMR3_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TMR4_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TMR5_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TMR6_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TMR7_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TMR8_BRK_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TMR8_CC_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TMR8_TRG_COM_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TMR8_UP_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USBD1_HP_CAN1_TX_IRQHandler</a> from usbd_interrupt.o(i.USBD1_HP_CAN1_TX_IRQHandler) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USBD1_LP_CAN1_RX0_IRQHandler</a> from usbd_interrupt.o(i.USBD1_LP_CAN1_RX0_IRQHandler) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[46]">USBD2_HP_CAN2_TX_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[47]">USBD2_LP_CAN2_RX0_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBDWakeUp_IRQHandler</a> from apm32f10x_int.o(i.USBDWakeUp_IRQHandler) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">USBD_ClassHandler</a> from usbd_class_cdc.o(i.USBD_ClassHandler) referenced from usbd_cdc.o(i.CDC_Init)
 <LI><a href="#[4f]">USBD_VCP_InEpCallback</a> from usbd_cdc.o(i.USBD_VCP_InEpCallback) referenced from usbd_cdc.o(i.CDC_Init)
 <LI><a href="#[50]">USBD_VCP_OutEpCallback</a> from usbd_cdc.o(i.USBD_VCP_OutEpCallback) referenced from usbd_cdc.o(i.CDC_Init)
 <LI><a href="#[51]">USBD_VCP_SetConfigCallBack</a> from usbd_cdc.o(i.USBD_VCP_SetConfigCallBack) referenced from usbd_cdc.o(.data)
 <LI><a href="#[5]">UsageFault_Handler</a> from apm32f10x_int.o(i.UsageFault_Handler) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">VCP_Reset</a> from usbd_cdc.o(i.VCP_Reset) referenced from usbd_cdc.o(i.CDC_Init)
 <LI><a href="#[a]">WWDT_IRQHandler</a> from startup_apm32f10x_hd.o(.text) referenced from startup_apm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_apm32f10x_hd.o(.text)
 <LI><a href="#[4a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[52]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[54]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[97]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[98]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[99]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[9a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EINT15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EMMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TMR1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TMR1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TMR1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TMR5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TMR6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TMR7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TMR8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TMR8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TMR8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TMR8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USBD2_HP_CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USBD2_LP_CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_VCP_OutEpCallback
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>APM_MINI_COMInit</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, board.o(i.APM_MINI_COMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = APM_MINI_COMInit &rArr; USART_Config &rArr; RCM_ReadPCLKFreq &rArr; RCM_ReadHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB1PeriphClock
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB2PeriphClock
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, apm32f10x_int.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CDC_Init</STRONG> (Thumb, 60 bytes, Stack size 72 bytes, usbd_cdc.o(i.CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CDC_Init &rArr; USBD_Init &rArr; USBD_HardWareInit &rArr; NVIC_EnableIRQRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InitParamStructInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f10x_int.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>EINT_ClearIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apm32f10x_eint.o(i.EINT_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDWakeUp_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>EINT_Config</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, apm32f10x_eint.o(i.EINT_Config))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HardWareInit
</UL>

<P><STRONG><a name="[58]"></a>GPIO_Config</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, apm32f10x_gpio.o(i.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_MINI_COMInit
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, apm32f10x_int.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, apm32f10x_int.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f10x_int.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>NVIC_ConfigPriorityGroup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f10x_misc.o(i.NVIC_ConfigPriorityGroup))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
</UL>

<P><STRONG><a name="[5e]"></a>NVIC_EnableIRQRequest</STRONG> (Thumb, 150 bytes, Stack size 28 bytes, apm32f10x_misc.o(i.NVIC_EnableIRQRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_EnableIRQRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ConfigPriorityGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HardWareInit
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f10x_int.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>RCM_ConfigUSBCLK</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, apm32f10x_rcm.o(i.RCM_ConfigUSBCLK))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HardWareInit
</UL>

<P><STRONG><a name="[57]"></a>RCM_EnableAPB1PeriphClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f10x_rcm.o(i.RCM_EnableAPB1PeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HardWareInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_MINI_COMInit
</UL>

<P><STRONG><a name="[56]"></a>RCM_EnableAPB2PeriphClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f10x_rcm.o(i.RCM_EnableAPB2PeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_MINI_COMInit
</UL>

<P><STRONG><a name="[60]"></a>RCM_ReadHCLKFreq</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, apm32f10x_rcm.o(i.RCM_ReadHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCM_ReadHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadSYSCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadPCLKFreq
</UL>

<P><STRONG><a name="[62]"></a>RCM_ReadPCLKFreq</STRONG> (Thumb, 62 bytes, Stack size 28 bytes, apm32f10x_rcm.o(i.RCM_ReadPCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RCM_ReadPCLKFreq &rArr; RCM_ReadHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[61]"></a>RCM_ReadSYSCLKFreq</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, apm32f10x_rcm.o(i.RCM_ReadSYSCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadHCLKFreq
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f10x_int.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f10x_int.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, system_apm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SystemClockConfig &rArr; SystemClock72M
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResumeIsrHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>USART_Config</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, apm32f10x_usart.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Config &rArr; RCM_ReadPCLKFreq &rArr; RCM_ReadHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadPCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_MINI_COMInit
</UL>

<P><STRONG><a name="[5a]"></a>USART_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, apm32f10x_usart.o(i.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_MINI_COMInit
</UL>

<P><STRONG><a name="[1d]"></a>USBD1_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbd_interrupt.o(i.USBD1_HP_CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD1_HP_CAN1_TX_IRQHandler &rArr; USBD_HighPriorityProc &rArr; USBD_ResetEPTxFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HighPriorityProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USBD1_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usbd_interrupt.o(i.USBD1_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD1_LP_CAN1_RX0_IRQHandler &rArr; USBD_LowPriorityProc &rArr; USBD_SetupProcess &rArr; USBD_WinUSBReqeust &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtrlInData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SuspendIsrHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResumeIsrHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetIsrHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LowPriorityProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBDWakeUp_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, apm32f10x_int.o(i.USBDWakeUp_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDWakeUp_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USBD_ClassHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_class_cdc.o(i.USBD_ClassHandler))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(i.CDC_Init)
</UL>
<P><STRONG><a name="[6b]"></a>USBD_CtrlInData</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_CtrlInData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_CtrlInData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteDataToEP
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPTxRxStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WinUSBGetDescriptor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardSetConfiguration
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardSetAddress
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardGetStatus
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardGetDescriptor
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardGetConfiguration
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOutProcess
</UL>

<P><STRONG><a name="[6f]"></a>USBD_CtrlInProcess</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_CtrlInProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_CtrlInProcess &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteDataToEP
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPTxRxStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LowPriorityProc
</UL>

<P><STRONG><a name="[70]"></a>USBD_CtrlOutData</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_CtrlOutData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_CtrlOutData &rArr; USBD_SetEPTxRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPTxRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOutProcess
</UL>

<P><STRONG><a name="[71]"></a>USBD_CtrlOutProcess</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_CtrlOutProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_CtrlOutProcess &rArr; USBD_CtrlInData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadDataFromEP
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOutData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInData
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LowPriorityProc
</UL>

<P><STRONG><a name="[73]"></a>USBD_DataInProcess</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataInProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_DataInProcess &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteDataToEP
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LowPriorityProc
</UL>

<P><STRONG><a name="[74]"></a>USBD_DataOutProcess</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DataOutProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_DataOutProcess &rArr; USBD_ReadDataFromEP
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadDataFromEP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LowPriorityProc
</UL>

<P><STRONG><a name="[76]"></a>USBD_HardWareInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usb_bsp.o(i.USBD_HardWareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_HardWareInit &rArr; NVIC_EnableIRQRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB1PeriphClock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ConfigUSBCLK
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[5d]"></a>USBD_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, usbd_init.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_Init &rArr; USBD_HardWareInit &rArr; NVIC_EnableIRQRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOn
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HardWareInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init
</UL>

<P><STRONG><a name="[5c]"></a>USBD_InitParamStructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_init.o(i.USBD_InitParamStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init
</UL>

<P><STRONG><a name="[7d]"></a>USBD_OpenInEP</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbd_init.o(i.USBD_OpenInEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_OpenInEP &rArr; USBD_SetEPType
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPType
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPTxStatus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPKind
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEPKind
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConvertEPType
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetIsrHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_Reset
</UL>

<P><STRONG><a name="[82]"></a>USBD_OpenOutEP</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_init.o(i.USBD_OpenOutEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_OpenOutEP &rArr; USBD_SetEPRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPType
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPRxStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPRxCnt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPKind
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEPKind
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConvertEPType
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetIsrHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_Reset
</UL>

<P><STRONG><a name="[7b]"></a>USBD_PowerOn</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, usbd_init.o(i.USBD_PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[72]"></a>USBD_ReadDataFromEP</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, drv_usb_device.o(i.USBD_ReadDataFromEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_ReadDataFromEP
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupProcess
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutProcess
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOutProcess
</UL>

<P><STRONG><a name="[81]"></a>USBD_ResetEPKind</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_usb_device.o(i.USBD_ResetEPKind))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ResetEPKind
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenOutEP
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenInEP
</UL>

<P><STRONG><a name="[79]"></a>USBD_ResetEPRxFlag</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_usb_device.o(i.USBD_ResetEPRxFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ResetEPRxFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LowPriorityProc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HighPriorityProc
</UL>

<P><STRONG><a name="[7a]"></a>USBD_ResetEPTxFlag</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_usb_device.o(i.USBD_ResetEPTxFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ResetEPTxFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LowPriorityProc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HighPriorityProc
</UL>

<P><STRONG><a name="[85]"></a>USBD_RxData</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_RxData &rArr; USBD_SetEPRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPRxStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPRxCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_VCP_OutEpCallback
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_VCP_SetConfigCallBack
</UL>

<P><STRONG><a name="[80]"></a>USBD_SetEPKind</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_usb_device.o(i.USBD_SetEPKind))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetEPKind
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenOutEP
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenInEP
</UL>

<P><STRONG><a name="[83]"></a>USBD_SetEPRxCnt</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, drv_usb_device.o(i.USBD_SetEPRxCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_SetEPRxCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RxData
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenOutEP
</UL>

<P><STRONG><a name="[75]"></a>USBD_SetEPRxStatus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_usb_device.o(i.USBD_SetEPRxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutProcess
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RxData
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenOutEP
</UL>

<P><STRONG><a name="[6d]"></a>USBD_SetEPTxRxStatus</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, drv_usb_device.o(i.USBD_SetEPTxRxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_SetEPTxRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LowPriorityProc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WinUSBReqeust
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardReqeust
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupProcess
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOutData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInProcess
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInData
</UL>

<P><STRONG><a name="[6e]"></a>USBD_SetEPTxStatus</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, drv_usb_device.o(i.USBD_SetEPTxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInProcess
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInProcess
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TxData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenInEP
</UL>

<P><STRONG><a name="[7f]"></a>USBD_SetEPType</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, drv_usb_device.o(i.USBD_SetEPType))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_SetEPType
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenOutEP
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenInEP
</UL>

<P><STRONG><a name="[84]"></a>USBD_SetEpAddr</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, drv_usb_device.o(i.USBD_SetEpAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_SetEpAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetIsrHandler
</UL>

<P><STRONG><a name="[7c]"></a>USBD_SetupProcess</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_SetupProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_SetupProcess &rArr; USBD_WinUSBReqeust &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtrlInData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WinUSBReqeust
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardReqeust
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPTxRxStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadDataFromEP
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LowPriorityProc
</UL>

<P><STRONG><a name="[86]"></a>USBD_StandardReqeust</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, usbd_stdreq.o(i.USBD_StandardReqeust))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_StandardReqeust &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtrlInData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WinUSBGetDescriptor
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardSetInterface
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardSetFeature
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardSetDescriptor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardSetConfiguration
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardSetAddress
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardGetStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardGetInterface
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardGetDescriptor
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardGetConfiguration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardClearFeature
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPTxRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupProcess
</UL>

<P><STRONG><a name="[93]"></a>USBD_TxData</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_TxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_TxData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteDataToEP
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_VCP_OutEpCallback
</UL>

<P><STRONG><a name="[4f]"></a>USBD_VCP_InEpCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_VCP_InEpCallback))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(i.CDC_Init)
</UL>
<P><STRONG><a name="[50]"></a>USBD_VCP_OutEpCallback</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, usbd_cdc.o(i.USBD_VCP_OutEpCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_VCP_OutEpCallback &rArr; USBD_TxData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TxData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RxData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(i.CDC_Init)
</UL>
<P><STRONG><a name="[87]"></a>USBD_WinUSBReqeust</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_stdreq.o(i.USBD_WinUSBReqeust))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_WinUSBReqeust &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtrlInData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WinUSBGetDescriptor
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPTxRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupProcess
</UL>

<P><STRONG><a name="[6c]"></a>USBD_WriteDataToEP</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, drv_usb_device.o(i.USBD_WriteDataToEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_WriteDataToEP
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInProcess
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInProcess
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TxData
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, apm32f10x_int.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>VCP_Reset</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_cdc.o(i.VCP_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VCP_Reset &rArr; USBD_OpenOutEP &rArr; USBD_SetEPRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenOutEP
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenInEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(i.CDC_Init)
</UL>
<P><STRONG><a name="[9d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[9e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[9f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = main &rArr; CDC_Init &rArr; USBD_Init &rArr; USBD_HardWareInit &rArr; NVIC_EnableIRQRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_MINI_COMInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[51]"></a>USBD_VCP_SetConfigCallBack</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_VCP_SetConfigCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_VCP_SetConfigCallBack &rArr; USBD_RxData &rArr; USBD_SetEPRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>USBD_ConvertEPType</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbd_init.o(i.USBD_ConvertEPType))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenOutEP
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenInEP
</UL>

<P><STRONG><a name="[65]"></a>USBD_HighPriorityProc</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, usbd_interrupt.o(i.USBD_HighPriorityProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_HighPriorityProc &rArr; USBD_ResetEPTxFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEPTxFlag
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEPRxFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD1_HP_CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>USBD_LowPriorityProc</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, usbd_interrupt.o(i.USBD_LowPriorityProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_LowPriorityProc &rArr; USBD_SetupProcess &rArr; USBD_WinUSBReqeust &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtrlInData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEPTxFlag
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEPRxFlag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEPTxRxStatus
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupProcess
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutProcess
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInProcess
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOutProcess
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD1_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[67]"></a>USBD_ResetIsrHandler</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, usbd_interrupt.o(i.USBD_ResetIsrHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_ResetIsrHandler &rArr; USBD_OpenOutEP &rArr; USBD_SetEPRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetEpAddr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenOutEP
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OpenInEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD1_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>USBD_ResumeIsrHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_interrupt.o(i.USBD_ResumeIsrHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_ResumeIsrHandler &rArr; SystemInit &rArr; SystemClockConfig &rArr; SystemClock72M
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD1_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>USBD_SuspendIsrHandler</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, usbd_interrupt.o(i.USBD_SuspendIsrHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_SuspendIsrHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD1_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>USBD_StandardClearFeature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_stdreq.o(i.USBD_StandardClearFeature))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardReqeust
</UL>

<P><STRONG><a name="[88]"></a>USBD_StandardGetConfiguration</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_stdreq.o(i.USBD_StandardGetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_StandardGetConfiguration &rArr; USBD_CtrlInData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInData
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardReqeust
</UL>

<P><STRONG><a name="[89]"></a>USBD_StandardGetDescriptor</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, usbd_stdreq.o(i.USBD_StandardGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_StandardGetDescriptor &rArr; USBD_CtrlInData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInData
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardReqeust
</UL>

<P><STRONG><a name="[8c]"></a>USBD_StandardGetInterface</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_stdreq.o(i.USBD_StandardGetInterface))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardReqeust
</UL>

<P><STRONG><a name="[8a]"></a>USBD_StandardGetStatus</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, usbd_stdreq.o(i.USBD_StandardGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_StandardGetStatus &rArr; USBD_CtrlInData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInData
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardReqeust
</UL>

<P><STRONG><a name="[8d]"></a>USBD_StandardSetAddress</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_stdreq.o(i.USBD_StandardSetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_StandardSetAddress &rArr; USBD_CtrlInData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInData
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardReqeust
</UL>

<P><STRONG><a name="[8e]"></a>USBD_StandardSetConfiguration</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usbd_stdreq.o(i.USBD_StandardSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_StandardSetConfiguration &rArr; USBD_CtrlInData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInData
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardReqeust
</UL>

<P><STRONG><a name="[8f]"></a>USBD_StandardSetDescriptor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_stdreq.o(i.USBD_StandardSetDescriptor))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardReqeust
</UL>

<P><STRONG><a name="[90]"></a>USBD_StandardSetFeature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_stdreq.o(i.USBD_StandardSetFeature))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardReqeust
</UL>

<P><STRONG><a name="[91]"></a>USBD_StandardSetInterface</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_stdreq.o(i.USBD_StandardSetInterface))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardReqeust
</UL>

<P><STRONG><a name="[8b]"></a>USBD_WinUSBGetDescriptor</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbd_stdreq.o(i.USBD_WinUSBGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_WinUSBGetDescriptor &rArr; USBD_CtrlInData &rArr; USBD_WriteDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlInData
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WinUSBReqeust
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardReqeust
</UL>

<P><STRONG><a name="[64]"></a>SystemClock72M</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, system_apm32f10x.o(i.SystemClock72M))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemClock72M
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[63]"></a>SystemClockConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_apm32f10x.o(i.SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemClockConfig &rArr; SystemClock72M
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock72M
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
